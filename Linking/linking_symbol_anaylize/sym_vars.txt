bash > gcc -c sym_vars.c -o sym_vars

	sym_vars.c:6:12: warning: ‘var4’ initialized and declared ‘extern’
	 extern int var4 = 0;
	            ^~~~
	sym_vars.c:7:12: warning: ‘var5’ initialized and declared ‘extern’
	 extern int var5 = 1;
	            ^~~~
bash > readelf -s sym_vars

Symbol table '.symtab' contains 21 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND 
     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS sym_vars.c
     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 
     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 
     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4 
     5: 0000000000000010     4 OBJECT  LOCAL  DEFAULT    4 var6
     6: 0000000000000014     4 OBJECT  LOCAL  DEFAULT    4 var7
     7: 0000000000000008     4 OBJECT  LOCAL  DEFAULT    3 var8
     8: 0000000000000000     0 SECTION LOCAL  DEFAULT    6 
     9: 0000000000000000     0 SECTION LOCAL  DEFAULT    7 
    10: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 
    11: 0000000000000004     4 OBJECT  GLOBAL DEFAULT  COM var0
    12: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    4 var1
    13: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    3 var2
    14: 0000000000000004     4 OBJECT  GLOBAL DEFAULT    4 var4
    15: 0000000000000004     4 OBJECT  GLOBAL DEFAULT    3 var5
    16: 0000000000000008     4 OBJECT  WEAK   DEFAULT    4 var9
    17: 000000000000000c     4 OBJECT  WEAK   DEFAULT    4 vara
    18: 000000000000000c     4 OBJECT  WEAK   DEFAULT    3 varb
    19: 0000000000000000   127 FUNC    GLOBAL DEFAULT    1 foo
    20: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND var3

bash > readelf -S sym_vars

There are 12 section headers, starting at offset 0x518:

Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .text             PROGBITS         0000000000000000  00000040
       000000000000007f  0000000000000000  AX       0     0     1
  [ 2] .rela.text        RELA             0000000000000000  00000380
       0000000000000120  0000000000000018   I       9     1     8
  [ 3] .data             PROGBITS         0000000000000000  000000c0
       0000000000000010  0000000000000000  WA       0     0     4
  [ 4] .bss              NOBITS           0000000000000000  000000d0
       0000000000000018  0000000000000000  WA       0     0     4
  [ 5] .comment          PROGBITS         0000000000000000  000000d0
       000000000000002a  0000000000000001  MS       0     0     1
  [ 6] .note.GNU-stack   PROGBITS         0000000000000000  000000fa
       0000000000000000  0000000000000000           0     0     1
  [ 7] .eh_frame         PROGBITS         0000000000000000  00000100
       0000000000000038  0000000000000000   A       0     0     8
  [ 8] .rela.eh_frame    RELA             0000000000000000  000004a0
       0000000000000018  0000000000000018   I       9     7     8
  [ 9] .symtab           SYMTAB           0000000000000000  00000138
       00000000000001f8  0000000000000018          10    11     8
  [10] .strtab           STRTAB           0000000000000000  00000330
       000000000000004c  0000000000000000           0     0     1
  [11] .shstrtab         STRTAB           0000000000000000  000004b8
       0000000000000059  0000000000000000           0     0     1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  l (large), p (processor specific)

bash > cat -n sym_vars.c

	 1	// Object(bind, type, section index)
     2	
     3	// For the object COMMON section, the compiler cannot decide whether `var0` is initialized or not
     4	// Cause `var0 are defined in the another place
     5	// Thus, var0 may direct to .data or .bss, where it depends on the value that assigns to
     6	int var0; // (Global, object, COMMON)
     7	int var1 = 0; // (Global, object, .bss)
     8	int var2 = 1; // (Global, object, .data)
     9	
    10	extern int var3; // (Global, object, UNDEF)
    11	// warning here equal to remove external
    12	extern int var4 = 0; // (Global, object, .bss)
    13	// warning here equal to remove external 
    14	extern int var5 = 1; // (Global, object, .data)
    15	
    16	// compiler will assign it to 0 just like var7
    17	static int var6;   // (Local, object, .bss)
    18	static int var7 = 0; // (Local, object, .bss)
    19	static int var8 = 1; // (Local, object, .data)
    20	
    21	__attribute((weak)) int var9; // (Weak, object, .bss)
    22	__attribute((weak)) int vara = 0; // (Weak, object, .bss)
    23	__attribute((weak)) int varb = 1; // (Weak, object, .text)
    24	
    25	
    26	// // (Global, func, .data)
    27	void foo(){
    28	  var0 = 2;  
    29	  var1 = 2;  
    30	  var2 = 2;  
    31	  var3 = 2;  
    32	  var4 = 2;  
    33	  var5 = 2;  
    34	  var6 = 2;  
    35	  var7 = 2;  
    36	  var8 = 2;  
    37	  var9 = 2;  
    38	  vara = 2;  
    39	  varb = 2;  
    40	}
